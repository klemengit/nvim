name: Test Neovim Configuration

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Test weekly to catch plugin compatibility issues
    - cron: '0 0 * * 0'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        neovim-version: ['0.9.5', '0.10.0', 'nightly']
        exclude:
          # Windows with nightly often has issues
          - os: windows-latest
            neovim-version: nightly

    steps:
    - uses: actions/checkout@v4

    - name: Install Neovim
      uses: rhysd/action-setup-vim@v1
      with:
        neovim: true
        version: ${{ matrix.neovim-version }}

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ripgrep fd-find xclip
        # Optional: Install LaTeX for VimTeX testing
        sudo apt-get install -y texlive-latex-base latexmk

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ripgrep fd
        # Optional: Install BasicTeX for VimTeX testing
        # brew install --cask basictex

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ripgrep fd
      shell: powershell

    - name: Check Neovim version
      run: nvim --version

    - name: Test configuration syntax
      run: |
        # Test that init.lua loads without syntax errors
        nvim --headless -c "lua vim.print('Configuration loaded successfully')" -c "quit"

    - name: Install plugins
      run: |
        # Install all plugins in headless mode
        nvim --headless "+Lazy! sync" +qa
      timeout-minutes: 10

    - name: Test plugin loading
      run: |
        # Test that all plugins load correctly
        nvim --headless -c "checkhealth lazy" -c "quit"

    - name: Test LSP integration
      run: |
        # Test Mason and LSP functionality
        nvim --headless -c "lua vim.print('Mason status:', vim.inspect(require('mason').get_installed_packages()))" -c "quit"

    - name: Test VimTeX (if LaTeX available)
      if: runner.os != 'Windows'
      run: |
        # Create a simple test.tex file and test VimTeX
        echo '\documentclass{article}\begin{document}Hello, World!\end{document}' > test.tex
        nvim --headless test.tex -c "VimtexCompile" -c "sleep 3" -c "quit" || echo "VimTeX test skipped (LaTeX not available)"
        rm -f test.tex test.pdf test.log test.aux test.fls test.fdb_latexmk

    - name: Test configuration health
      run: |
        # Run Neovim health checks
        nvim --headless -c "checkhealth" -c "quit" > health_check.log 2>&1 || true
        echo "Health check completed"
        # Print any ERROR messages
        grep -i "error\|fail" health_check.log || echo "No critical errors found"

    - name: Upload health check results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: health-check-${{ matrix.os }}-nvim-${{ matrix.neovim-version }}
        path: health_check.log

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install StyLua
      run: |
        wget -O /tmp/stylua.zip https://github.com/JohnnyMorganz/StyLua/releases/latest/download/stylua-linux.zip
        unzip /tmp/stylua.zip -d /tmp
        sudo mv /tmp/stylua /usr/local/bin/
        stylua --version

    - name: Check Lua formatting
      run: |
        stylua --check lua/

    - name: Validate lazy-lock.json
      run: |
        # Check that lazy-lock.json is valid JSON
        python3 -m json.tool lazy-lock.json > /dev/null
        echo "lazy-lock.json is valid JSON"

    - name: Check for common issues
      run: |
        # Check for hardcoded paths that might not work cross-platform
        ! grep -r "/home/" lua/ || (echo "Found hardcoded /home/ paths" && exit 1)
        ! grep -r "C:\\\\" lua/ || (echo "Found hardcoded Windows paths" && exit 1)
        
        # Check that lazy-lock.json exists and is committed
        test -f lazy-lock.json || (echo "lazy-lock.json missing" && exit 1)
        
        echo "Basic checks passed"